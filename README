warning:
	the main script (run.sh) working only with UNIX-like OSes
	scripts draw.py and kolmogorov_diff.py works everywhere,
	where python > 3.5 works

draw.py:
	python3 draw.py file_with_numbers.txt result_file_with_graph.png
	drawing graph from numbers with floating point divided by newline
	first line zero-th number
	second line first number
	...
	...
	n-th line (n-1)-th number

kolmogorov_diff:
	python3 kolmogorov_diff.py first.txt second.txt result.png
	calculating kolmogorov difference between two files with numbers
	and ploting two curves in the same plot for comparison 
	format of files same that used by draw.py

run.sh:
	run.sh mPhaseImitation.bin N_random_14byte_numbers test.csv
	mPhaseImitation.bin you can get by compiling this repository
		https://github.com/KimalIsaev/mPhaseImitation
	it generates 3 files:
		1) file with random numbers in rng_files\
		2) file with orbit time distribution in results\
		3) file with plot of orbit time distribution in pictures\
	test.csv file with multiple lines of parameters 
	for different queue system, one line is for one queue system
	and consist of this parameters in this order:
		N_device X_flow X_orbit Q_R0 Q_R1 Q_phases X_phases
	N_devices: amount of devices in system
	X_flow: intensity of puasson flow. which generating input request
	X_orbit: intensity of one request in orbit
	Q_R0: probability to exit system after device executed request  
	Q_R0: probability to be executed again
		after device executed request already 
	Q_R2 = 1-(Q_R1+Q_R2):  probability to orbit 
		after device executed request
	Q_phases: multiple non-negative values, 
		sum of which must be equal to one,
		defines probability to use phase with same index
	X_phases: multiple positive values
		(same number of values as Q-phases had),
		defines intensity of phase with same index

my standart use of this scripts:
	./run.sh ./mPhaseImitation.exe 2000 tests/first.csv
	xv pictures/outputed_file.png

-----------------------------------------------------------------------------

draw.py:
        python3 draw.py файл_с_числами.txt файл_с_графиком.png
        рисует график из рациональных чисел разделённых новой строкой
        на первой строке расположено нулевое число
        на второй строке расположено первое число
        ...
        ...
        на n-ой строке расположено (n-1)-ое число

kolmogorov_diff:
        python3 kolmogorov_diff.py первый.txt второй.txt результат.png
        рассчитывает растояние колмогорова между двумя распределениями
        и строит кривые обоих распределений на одном графике
        формат файлов должен быть таким же как и у тех что
        используются скриптом draw.py

run.sh:
        run.sh mPhaseImitation.bin количество_случ_чисел test.csv
        mPhaseImitation.bin вы можете получить скомпилировав
        код присутствующий в данном репрозитории:
                https://github.com/KimalIsaev/mPhaseImitation
        данный скрипт генерирует 3 файла:
                1) файл со случайными числами в папке rng_files\
                2) файл с распределением заявок на орбите в results\
                3) файл с графиком распределения в pictures\
        test.csv файл состоящий из нескольких строчек с параметрами
        для различных систем массового обслуживания,
        одна строка одна система массового обслуживания
        одна строчка состоит из следущих параметров в этом порядке:
                N_device X_flow X_orbit Q_R0 Q_R1 Q_phases X_phases
        N_devices: количество приборов
        X_flow: интенсивность потока генерирующего заявки
        X_orbit: интенсивность одной заявки на орбите
        Q_R0: вероятность покинуть систему после того как
                закончено обслуживание
        Q_R0: вероятность снова пойти на обслуживание
                после того как заявка была выполнена
        Q_R2 = 1-(Q_R1+Q_R2): вероятность перейти на орбиту
                после того как заявка была выполнена
        Q_phases: несколько неотрицательных значений,
                сумма которых должна равняться единице,
                определяет вероятность с которой заявка
                будет исполняться на этой фазе
                (первый элемент в Q_phases определят
                 вероятность исполнения на первой фазе,
                 второй на второй и т. д.)
        X_phases: несколько положительных значений,
                столько же сколько и у Q_phases,
                определяет интенсивность фазы

моё обычное использование данных скриптов:
        ./run.sh ./mPhaseImitation.exe 2000 tests/first.csv
        xv pictures\outputed_file.png


